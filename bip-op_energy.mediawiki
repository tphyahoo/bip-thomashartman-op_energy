<pre>
  BIP: TK
  Layer: Consensus (soft fork)
  Title: OP_ENERGY
  Author: Thomas Hartman <thomashartman1@gmail.com>
  Comments-Summary: No comments yet.
  Comments-URI: ?
  Status: ?
  Type: ?
  Created: 2020-08-31
  License: ?
</pre>

==Abstract==
This BIP describes the new opcode OP_ENERGY, which provides a price that can be used to write energy derivative contracts using bitcoin. This price is a protocol measure of the energy cost of mining between two blocks, in expected future hashes per satoshi. 

==Summary==

===Calculation of OP_ENERGY Price===

todo: maybe this should be future_energy_price

Roughly, price is: 

<pre>
(miner work / miner revenue) * (expected seconds / actual seconds) 
</pre>

Assuming stable revenue: 

<pre>
price(difficulty epoch) = hashes_per_satoshi (difficulty epoch + 1)
</pre>

So, generalizing from difficulty epoch to any block span, price is expected future hashes_per_satoshi.<ref>https://github.com/tphyahoo/bip-thomashartman-op_energy/blob/master/OP_ENERGY_Whitepaper.mediawiki#OP_ENERGY_The_Dampened_Price_of_Satoshis_in_Hashes_Between_Two_Blocks</ref>

The exact definition is: 

<pre>
op_energy_price block1 block2 = pack_uint256 price'
  where        
      price' = ( work * expectedSeconds ) `div` (actualSeconds * revenue)
      work = chainwork (block2) - chainwork (block1) 
      revenue = if revenue' == 0 then 1 else revenue'
            where revenue' = chainRevenue (block2) - chainRevenue (block1)
                  chainRevenue is sum of all coinbase rewards (coinbase) up to this block
      expectedSeconds = 600 * (block2 - block1) 
      actualSeconds = if actualSeconds' = 0 then 1 else actualSeconds'
            where actualSeconds' = median_time_past (block2) - median_time_past (block1)
                  median_time_past is median time of previous 11 blocks as defined in bip 113
      pack_cbits = compress integer, ie same compression used for target in block header
</pre>

* Due to cbits packing, there could theoreticaly be overflow issues, ie if chainWork overflows 2^256. But, practically, this seems to be impossible. Because bitcoin is already using on the order of 0.1% of global energy. A great many orders of magnitude more than 1000x would be required for overflow to be a problem. 

* ActualSeconds should be guaranteed to be positive. Because the 11 block median time past should increase with every block. Because, per protocol rules, the block time stamp must be greater than the block median time past <ref>https://en.bitcoin.it/wiki/Block_timestamp</ref>.
However, while true in theory, this seems not to be the case in practice. 
eg, blocks 646123 and 646124.
This is why there is a divide by zero check for actualSeconds. That is, not needed in theory, but seems to be needed in practice.
Todo investigate further. 

todo: is pack_cbits(1) nonzero? It should be, but just have brian sanity check this.
Otherwise I could see a potential issue with divide by zero for actualSeconds. If so, can do the same set to 1, as for satoshis. 

===Script Interpreter Behavior===

====Writing (Buy/Sell)==== 

todo: maybe this should only return the price after all. 

OP_ENERGY block1 block2 strike-price funds-address 

Alice (the buyer) and Bob (the seller) agree on terms of an OP_ENERGY binary call contract: block span (block1 to block2), strike, premium, and settlement. 

A sale transaction enforcing these terms is written interactively by Alice  and Bob, who need not trust each other. In broad outline, Alice and Bob create a multisig address interactively. Each deposits bitcoin to the address. Alice's deposit is the premium. Alice + Bob's combined deposit is the settlement.  

The script output is spendable by Alice if 

<pre>
strike < op_energy_price block1 block2 
</pre>

or Bob otherwise.

todo: fix this. show an actual example ScriptPubKey of a transaction. I think there was a comment from zmnscpxj on bitcoin-dev that said what to do. basically, said to copy mechanism from HTLC in lightning settlement. 

breadcrumbs:
"That said, the construction you are imagining is indeed going to work.
The only requirement is that the hash-branch needs two signatures in
order to ensure that it pays out to a transaction with a very specific
contract.
Xref.  how Lightning *really* creates its HTLCs."
  https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2020-August/018095.html
  https://bitcoin.stackexchange.com/questions/96879/simulate-htlc-in-regtest-c-lightning
  https://medium.com/softblocks/lightning-network-in-depth-part-2-htlc-and-payment-routing-db46aea445a8


If any of the following conditions are true, the script interpreter will terminate with an error:

* the stack has less than 4 elements
* either of the 2 block arguments is not type compatible with an nlocktime block number, that is, not in the range from 1 to 500,000,000
* block2 <= block1
* strike-price is not a cbits encoded 256 bit number, ie 32 bits which encodes a 256 bit number. 

====Settling (Resolution)====

The settlement transaction is simply for Alice or Bob to spend the now unlocked funds, after the second block + 100 is reached.

todo: fix this as well, give example of ScriptSig for spending. 

If the following conditions is true, the script interpreter will terminate with an error:

* block2 >= blockchain tip - 100 

The same 100 block burying condition as for spending miner rewards applies to OP_ENERGY settlement.<ref>see whitepaper for why. todo, link to relevant section</ref>

todo: if we are using taproot, as I believe zmnscpxj claimed is necessary, what are implications of nodes enforcing this 100 block burying condition, if the script itself is obfuscated via taproot?

==Motivation==

As Bitcoin lets untrusted parties send value over a communications channel, OP_ENERGY lets untrusted parties trade energy derivatives over a communications channel. Rather than price financial instruments in dollars per unit of some commodity, or bitcoin per unit of some asset, prices for OP_ENERGY contracts are given in hashes per satoshi.

The basic contract is a european cash-or-nothing binary call <ref>https://en.wikipedia.org/wiki/Binary_option#Cash-or-nothing_call</ref>
on whether some future OP_ENERGY price exceeds some strike. 

Fair prices for OP_ENERGY binaries can be determined using techniques such as black scholes, as is done by market makers on many existing binary exchanges. (Whitepaper: pricing) 

OP_ENERGY settlements are less prone to abuse than binaries on existing centralized binary exchanges, as settlement prices are derived from consensus bitcoin data. 

Synthetic versions of derivatives such as vanilla puts, calls, and futures, can be built up out of the binary call primitive. (whitepaper: compound contracts)

As fiat prices roughly track energy prices, fiat trading volume can thus be moved off custodial exchanges, making markets more efficient, private, and secure.

OP_ENERGY trading is a potentially rich source of miner income, securing bitcoin as miners are weaned off block rewards.

Like any bitcoin transaction, OP_ENERGY trades can be cached onto second layer systems such as lightning. So high frequency trading is feasible, and affordable. OP_ENERGY market makers would be running lightning nodes, earning lightning fees, and presumably also routing non-OP_ENERGY lightning transactions for additional lightning fee income. (whitepaper: HFT)

There may be privacy benefits as well, such as multiparty trades done in mix pools, akin to joinmarket.

Many concrete use cases are given in the whitepaper.

==Specification==

Todo: 

* uint256 arithmetic
* write binary call, on chain
* settle binary call, on chain
* write and settle binary call, lightning 

==Test Vectors and Reference Code==

Todo.

Initial thoughts for tests... 

* uint256 stuff
* check some empty blocks, in early times when approved subsidy = actual subsidy. The OP_ENERGY should depend on only the computed subsidy, and the mediantimes. 
* for actual subsidy, versus subsidy claimed, should be approved subsidy. Check block spans where approved does not equal actual subsidy <ref>https://medium.com/amberdata/why-the-bitcoin-supply-will-never-reach-21-million-7263e322de1</ref>.
* hardcode historical prices from whitepaper, check these in tests

==Deployment==

Soft fork. 

== Footnotes ==

<references />

== Acknowledgements==

Tamas Blummer (RIP), whose OP_DIFFICULTY proposal was the inspiration for this bip. Jeremy Rubin (powswap). 







