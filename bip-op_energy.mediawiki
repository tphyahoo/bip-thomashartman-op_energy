<pre>
  BIP: TK
  Layer: Consensus (soft fork)
  Title: OP_ENERGY
  Author: Thomas Hartman <thomashartman1@gmail.com>
  Comments-Summary: No comments yet.
  Comments-URI: ?
  Status: ?
  Type: ?
  Created: 2020-08-31
  License: ?
</pre>

==Abstract==
This BIP describes the new opcode OP_ENERGY, which is used to write and settle binary call contracts using bitcoin. The price for these contracts is a protocol measure of the energy cost of mining between two blocks, in hashes per satoshi. 

==Summary==

===Calculation of OP_ENERGY Price===

The motivation for this formula is given in the OP_ENERGY whitepaper.<ref>https://github.com/tphyahoo/bip-thomashartman-op_energy/blob/master/OP_ENERGY_Whitepaper.mediawiki#OP_ENERGY_The_Dampened_Price_of_Satoshis_in_Hashes_Between_Two_Blocks</ref>

The exact definition is: 

<pre>
op_energy_price block1 block2 = pack_uint256 price'
  where 
      price' = ( ( hashes `div` satoshis ) * expectedSeconds ) `div` actualSeconds 
      hashes = chainwork (block2) - chainwork (block1)
      satoshis = chainRevenue (block2) - chainRevenue (block1)
            where chainRevenue is sum of all miner rewards (subsidy + fees) up to this block
      expectedSeconds = 600 * (block2 - block1)
      actualSeconds = median_time_past (block2) - median_time_past (block1)
        where median_time_past is median time of previous 11 blocks as defined in bip 113
      pack_uint256 = compress a uint256 integer into 32 bits, using same compression as cbits in block header.
      div = integer division
</pre>

Implementation notes: 

* Unless otherwise noted, all values in the above calculation are ordinary integers.<ref>=Due to the cbits packing in the last step, this could technically overflow if price' overflows 2^256, but this seems to be impossible given that bitcoin is already using on the order of 0.1% of global energy and is thus unlikely to rise more than 1000x. A great many orders of magnitude more than 1000x would be required for the overflow issue to arise.</ref> 

* ActualSeconds is guaranteed to be positive, as the 11 block median time past increases with every block. This is because, per protocol rules, the block time stamp must be greater than the block median time past <ref>https://en.bitcoin.it/wiki/Block_timestamp</ref>.

* The subsidy part of the miner reward is the protocol approved subsidy, which can be looked up from the block number. Actual subsidy differs from this by a few satoshis, presumably due to miner error <ref>https://medium.com/amberdata/why-the-bitcoin-supply-will-never-reach-21-million-7263e322de1</ref>.

===Script Interpreter Behavior===

OP_ENERGY redefines the existing NOP_TBD (to be determined) opcode to write and settle binary calls.

====Writing (Buy/Sell)==== 

OP_ENERGY block1 block2 strike-price funds-address 

Alice (the buyer) and Bob (the seller) agree on terms of an OP_ENERGY binary call contract: block span (block1 to block2), strike, premium, and settlement. 

A sale transaction enforcing these terms is written interactively by Alice  and Bob, who need not trust each other. In broad outline, Alice and Bob create a multisig address interactively. Each deposits bitcoin to the address. Alice's deposit is the premium. Alice + Bob's combined deposit is the settlement.  

The script output is spendable by Alice if 

<pre>
strike < op_energy_price block1 block2 
</pre>

or Bob otherwise.

todo: fix this. show an actual example ScriptPubKey of a transaction. I think there was a comment from zmnscpxj on bitcoin-dev that said what to do. basically, said to copy mechanism from HTLC in lightning settlement. 


If any of the following conditions are true, the script interpreter will terminate with an error:

* the stack has less than 4 elements
* either of the 2 block arguments is not type compatible with an nlocktime block number, that is, not in the range from 1 to 500,000,000
* block2 <= block1
* strike-price is not a cbits encoded 256 bit number, ie 32 bits which encodes a 256 bit number. 

====Settling (Resolution)====

The settlement transaction is simply for Alice or Bob to spend the now unlocked funds, after the second block + 100 is reached.

todo: fix this as well, give example of ScriptSig for spending. 

If the following conditions is true, the script interpreter will terminate with an error:

* block2 >= blockchain tip - 100 (

The same 100 block burying condition as for spending miner rewards applies to OP_ENERGY settlement.<ref>see whitepaper for why. todo, link to relevant section</ref>

todo: if we are using taproot, as I believe zmnscpxj claimed is necessary, what are implications of nodes enforcing this 100 block burying condition, if the script itself is obfuscated via taproot?

===Penalization of Uneconomic Transactions===

To do

==Motivation==

As Bitcoin lets untrusted parties send value over a communications channel, OP_ENERGY lets untrusted parties trade energy derivatives over a communications channel. Rather than price financial instruments in dollars per unit of some commodity, or bitcoin per unit of some asset, prices for OP_ENERGY contracts are given in hashes per satoshi.

The basic contract is a european cash-or-nothing binary call <ref>https://en.wikipedia.org/wiki/Binary_option#Cash-or-nothing_call</ref>
on whether some future OP_ENERGY price exceeds some strike. 

Fair prices for OP_ENERGY binaries can be determined using techniques such as black scholes, as is done by market makers on many existing binary exchanges. (Whitepaper: pricing) 

OP_ENERGY settlements are less prone to abuse than binaries on existing centralized binary exchanges, as settlement prices are derived from consensus bitcoin data. 

Synthetic versions of derivatives such as vanilla puts, calls, and futures, can be built up out of the binary call primitive. (whitepaper: compound contracts)

As fiat prices roughly track energy prices, fiat trading volume can thus be moved off custodial exchanges, making markets more efficient, private, and secure.

OP_ENERGY trading is a potentially rich source of miner income, securing bitcoin as miners are weaned off block rewards.

Like any bitcoin transaction, OP_ENERGY trades can be cached onto second layer systems such as lightning. So high frequency trading is feasible, and affordable. OP_ENERGY market makers would be running lightning nodes, earning lightning fees, and presumably also routing non-OP_ENERGY lightning transactions for additional lightning fee income. (whitepaper: HFT)

There may be privacy benefits as well, such as multiparty trades done in mix pools, akin to joinmarket.

Many concrete use cases are given in the whitepaper.

==Specification==

Todo: 

* uint256 arithmetic
* write binary call, on chain
* settle binary call, on chain
* write and settle binary call, lightning 

==Test Vectors and Reference Code==

Todo.

Initial thoughts for tests... 

* uint256 stuff
* check some empty blocks, in early times when approved subsidy = actual subsidy. The OP_ENERGY should depend on only the computed subsidy, and the mediantimes. 
* for actual subsidy, versus subsidy claimed, should be approved subsidy. Check block spans where approved does not equal actual subsidy <ref>https://medium.com/amberdata/why-the-bitcoin-supply-will-never-reach-21-million-7263e322de1</ref>.
* hardcode historical prices from whitepaper, check these in tests

==Deployment==

Soft fork. 

== Footnotes ==

<references />

== Acknowledgements==

Tamas Blummer (RIP), whose OP_DIFFICULTY proposal was the inspiration for this bip. Jeremy Rubin (powswap). 







