<pre>
  BIP: TK
  Layer: Consensus (soft fork)
  Title: OP_ENERGY
  Author: Thomas Hartman <thomashartman1@gmail.com>
  Comments-Summary: No comments yet.
  Comments-URI: ?
  Status: ?
  Type: ?
  Created: 2014-10-01
  License: ?
</pre>

==Abstract==
 
This BIP describes the new opcode OP_ENERGY which measures the price of bitcoin in hashes between two blocks. 

==Summary==

OP_ENERGY redefines the NOP_TBD1 opcode. It takes two block numbers as arguments.

The price of a single block span, that is, OP_ENERGY n (n+1) is: 

<pre>
satoshis = subsidy (n) + fee (n)
blocktime = timestamp (n+1) - timestamp (n)
hashes  = ( 2 ^ 256 / target (n) ) * ( 600 / blocktime )
price = hashes / satoshis
</pre>

For a multi block span, the price is sum(hashes)/sum(satoshis), summing over the single block spans.

The calculation is done on uint256 integers (same as target).  

Bip113 mediantime is used for timestamps, to guarantee time is always increasing. 

When executed, if any of the following conditions are true, the script interpreter will terminate with an error:

* the stack has less than 2 elements
* either of the 2 arguments is not type compatible with an nlocktime block number, that is, not in the range from 1 to 500,000,000
* second block number is less than or equal to first block number
* second block is in the future
* block distance exceeds sampling limit of 2016 blocks (or some reasonable limit tbd)

Otherwise, the price goes on the stack. The stack format for price is uint256, same as target. 

==Motivation==

As Bitcoin lets untrusted parties send value over a communications channel, OP_ENERGY lets untrusted parties trade energy derivatives over a communications channel.

The basic financial instrument is a [https://en.wikipedia.org/wiki/Binary_option cash or nothing binary option] on whether some future OP_ENERGY price exceeds a minimum threshold value. 

Synthetic versions of garden variety derivatives such as puts, calls, and futures, can be built up out of this primitive.

As fiat prices roughly track energy prices, fiat trading volume can thus be moved off custodial exchanges, making markets more efficient, private, and secure.

Like any other bitcoin transaction, OP_ENERGY price trades can be cached onto second layer systems such as lightning. 

OP_ENERGY trading is a potentially rich source of miner fee income, securing bitcoin as miners are weaned off block rewards. This would also drive lightning adoption. And there may be privacy benefits as well, such as multiparty trades done in mix pools, akin to joinmarket. 

===Intuition===

OP_ENERGY price charts look similar to charts of difficulty and hashrate. However, unlike difficulty, OP_ENERGY is aware of speed of block discovery (as is hashrate). And unlike hashrate, OP_ENERGY also factors in miner revenue, including fees. 

To a lesser but still significant degree, OP_ENERGY prices track dollar prices, because energy is priced in dollars. If the OP_ENERGY price increases by 100x between two block spans, it costs 100x as much energy to mine, hence 100x as many dollars. To be sure, OP_ENERGY price is not perfectly correlated to fiat price. But, there is enough correlation to be useful for fiat hedging. 

(Todo: make some charts of (OP_ENERGY price) from blockchain, vs usd price from fiat exchanges, using real data, to support this.)

Example use case 1: In a fiat centric world, if fiat can buy more bitcoin via hashes (cheap OP_ENERGY prices) than via direct exchange, it makes sense for savvy bitcoin accumulators to sell bitcoin for fiat, and rebuy the bitcoin with hashes instead. This explains fiat price manias, and can be used to in hedging against them. 

Todo: more examples? Hash rental scenario? Power purchase agreements between miners and utilities? 

===Comparison to Prior Art===

Existing powswap and OP_DIFFICULTY proposals on dev-bitcoin would allow to speculate on future hashrate. Powswap would not require a protocol change. However, powswap does not measure the true miner price of bitcoin in hashes as it does not include transaction fees, which will some day dominate block reward. 

===Example OP_ENERGY Prices===

<pre>
Todo:
Give correct numbers, which could also work as test vectors. 
Use uint256 arithmetic. Currently using ieee754 floating points, and rounding to the nearest integer.
Use median time. Currently using using block timestamp.
Give packed uint256 as well as decimal representation.
</pre>

Single block spans: 

* genesis block                 (OP_ENERGY 1 2): 7
* first block of first halving  (OP_ENERGY 210,000 210,001): 3,830,159 
* first block of second halving (OP_ENERGY 420,000 420,001): 700,961,030,332

The 6 order of magnitude change from genesis to first halving reflects the transition to asics, which was a one time event. The 2 order of magnitude change from first to second halving shows hashes more closely tracking energy (and hence fiat) prices. (todo: work on this paragraph, express it more clearly)

Todo: can we look at OP_ENERGY price at point in time where first fiat trade occurred, for a penny or whatever it was? 2010 sometime iirc. I suspect OP_ENERGY price from then to first halving would far exceed the fiat price change, due to asics. But again this is one time thing. Discuss and make it clearer.

500 block spans: 

* first 500 blocks      (OP_ENERGY 1 500): todo
* before first halving  (OP_ENERGY 209,499 209,999): todo
* around first halving  (OP_ENERGY 209,750 210,250): todo
* after first halving   (OP_ENERGY 210,000 210,500): todo
* before second halving (OP_ENERGY 419,499 419,999): todo
* around second halving (OP_ENERGY 419,750 420,250): todo
* after second halving  (OP_ENERGY 420,000 420,500): todo

Todo: chart 500 block OP_ENERGY price for first 500,000 blocks. 

===Binary Options===


Binary purchase transactions are written interactively by Alice (the buyer / market taker) and Bob (the seller / market maker), who need not trust each other. Alice and Bob create a multisig address interactively. Each deposits bitcoin to the address, which is locked until settlement. Alice's deposit is the premium. Alice + Bob's combined deposit is the settlement value.  When the OP_ENERGY price of the binary is known, the settlement value is spendable by Alice if the price is over the minimum, Bob otherwise. 

OP_LESSTHAN can be used to perform the comparison in script.

(Todo: give details given on how purchase transaction is created interactively.)

By Black Scholes, the price of the binary is the negative of the strike delta, ie the derivative of the vanilla call price with respect to strike 

<pre>
Cv = vanilla call price
K = strike

strike delta = dCv/dK
binary call price = - strike dalta 
</pre>

This means that one can fairly price on-chain binaries, by looking at the strike delta for related vanilla calls.

For standardization reasons, we assume henceforth all binary contracts pay 10,000 sat, so price is 10,000 * (- strike delta). 

===Real World Pricing Example===

todo: fix this so it is using strike delta instead of regular delta. 

Bob wants to make a market on the price from blocks 647,136 to 648,136, which is 1000 blocks in the future. To do this, he needs to pick a predicted minimum price, and determine a strike delta for it. 

<pre>
Current date: August 29, 2020 
Current block: 646,136
Next target adjustment: 647,136
Predicted difficulty adjustment, from block times: -4.3%
Predicted target adjustment, from block times: +4.3%
Predicted OP_ENERGY price adjustment, from block times: -4.3%
PRICE_645_646 = OP_ENERGY 645,136 646,136 = TODO, give real number (price of last 1000 blocks, which is known)
</pre> 

Since energy currently trades against fiat, to get a market feel Bob looks at what fiat option prices are available, expiring around September 7. 

<pre>
Block 647,136: around September 7, 2020
On deribit:
  Spot: $11,450
  $11,000 vanilla call deltas
    September 4: 0.76
    September 11: 0.70
    Splitting the difference, September 7 delta guesstimate: 0.73.
  $11,000 is 4% under spot
</pre>

The on-chain predicted OP_ENERGY price adjustment of -4.3% is reasonably in line with deribit's prediction that fiat price is 73% likely to not drop more than 4%. 

So Bob could fair price PRICE_645_646 - 4%, on blocks 647,136 to 648,136, at 7300 sat (10,000 * 0.73). 

<pre>
 MINPRICE96 = PRICE_645_646 * 0.96 = (todo, give real number)
</pre>


Note that if target was unchanged but blocks startied coming in 4% faster after 647136, the trade would resolve the same. Which is good, since the real world energy price would be the same. 

Alice, the buyer, is paid the 10,000 sat if 

<pre>
MINPRICE96 < OP_ENERGY 647,136 648,136 
</pre>

Bob would like to earn 1% as a market maker. So he would buy at 0.5% less (7263 sat) and sell at 0.5% more (7336 sat).

I believe this to be a reasonable pricing model, for demonstration purposes. If the bip is adopted, I expect full time and hyper-competitive market markers would use more sophisticated models. 

If Bob can match buyers and sellers for say, a 1 month lock-up period, this is equivalent to earning 1% a month market risk free, and exit-scam risk free, on his bitcoin. So there is a huge incentive to market-make. 

If custodial exchanges offered OP_ENERGY compatible options, strike deltas on these options could be used directly rather than having to impute them from fiat price. There is a reason for such exchanges to do so. Custodial derivative exchanges are natural market makers for OP_ENERGY binaries, because they have first look at the strike deltas on their own platform, giving them an edge. Given this profit motive, it is reasonable to hope that a compatible market will emerge on custodial exchanges to complement trades happening on chain. 

===Synthetic Call===

Synthetic versions of derivative instruments such as puts, calls, and futures can be composed from primitive cash-or-nothing atoms. 

To give an example, I will show how to build a synthetic call, starting out from the binary pricing example given above. 

The payoff of this call is capped. And it pays off in granular ticks. So the synthetic call is different from the vanilla call, which pays off smoothly, and is not capped. However, by expanding the max price higher, and adding more ticks, the synthetic call can mock the real call to any desired level of precision. The more "realistic" the synthetic call, the higher the transaction fees. However as we see later, the instruments can avoid block fees by using lightning. So very rich and vanilla feeling derivatives can be built affordably. 

Now the call. It has a maximum settlement value of 100,000 sat. It is composed of ten atoms, each 10,000 sat, as in the previous example. The atoms have strikes at MINPRICE96 (see above), MINPRICE96+1%, etc, up to MINPRICE96+9%. The synthetic call has expected payoff less than a vanilla call if the underlying OP_ENERGY price increases by more than 9%. 

If the measured price is under MINPRICE96, Bob sweeps all 100,000 sats. If it is higher than the MINPRICE96*1.09 cap, Alice gets everything. If the price settles somewhere between, Bob and Alice split the 100,000 sats, with each binary atom acting like a price tick that decides who should get the settlement coins. So it acts very similarly to a call.

Pricing for this compound instrument can be worked out by pricing the simpler binaries, as in the previous example, and then adding up all the prices.

===Compound Instrument Construction=== 

There are two ways to create a compound instruments, such as the call described above.

<pre>
1) Multiple atomic binary utxos, each potentially in its own transaction, each potentially from a separate market maker. 
2) Multiple if/then clauses in a single utxo, from a single market maker.
</pre>


The first technique is more flexible. For instance, Alice could construct such a synthetic call from multiple binary vendors in a single multi-party transaction, similar to how joinmarket works. Or she could build up such an instrument over time with multiple transactions, shopping for advantageous prices. Multiple outputs are more expensive in transaction fees. But this can be mitigated with lightning. 

In the second technique, Bob sells Alice the call in a single transaction, with 10 if-then clauses. This is cheaper in block space. If adopted, taproot would make the transaction fee logarithmic in number of ticks rather than linear. 

The two techniques can be mixed.   

=== Buying and Selling Binaries with Lightning (direct channel) === 

In this section, we show how Alice could buy a binary from Bob, and sell it back, using lightning. Neither the buy nor the sell appears on chain, and no mining fees need be paid. For simplicity, we start with the case where Alice has a direct channel with Bob, so we don't need to worry about routing or lightning fees.

We start with Alice having a 40,000 sat dual funded channel with Bob. Each of them has a balance of 20,000 sat. 

<pre>
Alice <- 20,000 20,000 -> Bob
</pre>

We use the pricing example from before, so Alice buys a binary for 7,336 sat. In return, Bob has to lock up 10,000 sat until the target block is mined. 

<pre>
Alice <- (20000 - 7336) ( 10,000 locked settlement ) ( 20,000 + 7,336 - 10,000 ) -> Bob
=> Alice <- 12664 (10,000 locked settlement) 17336 -> Bob
</pre>

Alice still has 12,664 sats of liquidity that she can use to make lightning purchases on this channel. Bob has 17,336 sats of liquidity he can spend through Alice. And 10,000 sats are locked up until the target block is reached. 

Blocks start coming in more slowly, and Alice starts to worry about her position. So she tries to sell the binary back to Bob. Bob agrees to buy the contract back from Alice, for 7263 sat. Since Bob originated the contract in the first places, this erases the contract. The channel how looks like

<pre>
Alice <- (12,664 + 7,263) (17,336 - 7,336 + 10,000) -> Bob
=> Alice <- 19927 20073 => Bob
</pre>

Bob made 73 sats, or 0.73% on the 10,000 sat he had to lock up. And it is just a pristine, ordinary lightning channel again. As far as the world knows, if the channel closed now, no visible trades took place. 

Alternatively, if Bob was not offering Alice an attractive buy back price, Alice could have shopped around with other market makers to sell a 16.9T binaries to, thereby neutralizing the trade she put on with Bob. This results in two lightning channels with sats tied up in the binary. There is less lightning liquidity with this scenario than where Bob let Alice out of her position, but financially there is the same risk profile for Alice, ie no market risk. And Bob got to hold on to the trade that he likes. 

(Todo: give technical justification that this can be done with lightning.)

=== Binaries with Lightning (routing) === 

What if Alice does not have a direct channel with Bob, but wishes to route through Carol? 

This should still work. However, unlike the usual situation for a routing node, Carol has 10,000 sats of liquidity locked up. She will have to be compensated for this with lightning fees. It's similar to paying interest at a bank. 

Todo: flesh out this example. 


==Specification==

Todo

==Economic Considerations==

Todo

look at cost of ops (starting with other ops). Is there such a thing?
What should be cost of OP_ENERGY? The greater the span of blkocks the more computation, so should this be accounted for? Or is this clipping coupons, and better not to even try.

Model a scenario where there is a full 1mb block full of maximally expensive OP_ENERGY price derivate settlements. Is there a DOS attack here?

==Risks==

Todo, needs work: 

Price manipulation scenarios: 

* transaction fees 
* hashrate

Denial of service scenarios:

* cost of computing prices for nodes 
  If current hashes / satoshis calculation is too expensive, perhaps a simpler definition is possible, that still is useful for trading. 
  Ie, sum(prices) instead of sum(hashes)/sum(satoshis) (but conceptually this definition is harder to reason about)

Chain split scenario
* ?

Protocol
* price calculation needs to be very simple and clear, to minimize risk of inconsistent implementation between clients

* other issues?


==Deployment==

Soft fork. 

== Acknowledgements==

Tamas Blummer (RIP), whose OP_DIFFICULTY proposal was the inspiration for this bip. Jeremy Rubin (powswap). 

Everyone who helped on bitcoin-dev (todo). 








