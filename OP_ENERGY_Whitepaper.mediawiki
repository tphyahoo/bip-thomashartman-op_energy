<pre>
  The OP_ENERGY Market
  Peer to Peer Energy Derivatives Trading on Bitcoin
  
  Thomas Hartman thomashartman1@gmail.com
</pre>

=Abstract= 

=Introduction=

todo

==Rationale for OP_ENERGY Hashes Per Sat Formula==

===Target, Hashes, Difficulty and Chainwork===

===Chainwork===

Chainwork(block) is the cumulative hashes statistically expected to reach a certain height in the blockchain. This is a key consensus value, used to determine which blockchain is most valuable when there are conflicts at the tip. 

<pre>
chainwork(blockN) = blockwork(block0) + blockwork(block1) + ... + blockwork(blockN)
</pre>

===Blockwork===

Blockwork(block) is the statistically expected number of hashes required to solve a block.<ref>Defined in the bitcoin core reference client, in GetBlockProof</ref>. 

<pre>
blockwork(block) = 2^256 `div` ( target(block) + 1 )
  where `div` = integer division
</pre>


Target(block) is the way the work (in hashes) required of a block is recorded in the bitcoin block header.

An important constant is the target of the genesis block:

<pre>
genesis_target = target(0) = 0xffff * 2^208
</pre>

With this, we can calculate the blockwork of the genesis block:

<pre>
genesis_blockwork = blockwork(0) = 2^256 `div` ((0xffff * 2^208)) + 1) = 0x100010001 
  (approximately 2^32)
</pre>

Difficulty(block) is a floating point measure of how much more expensive (in hashes) blocks have become since genesis.

<pre>
difficulty(block) = genesis_target / target(block)
  where / = floating point division
</pre>

Blockwork can also be expressed in difficulty units, allowing for some imprecision due to the complexities of float. IE: 

<pre>
blockwork(block) =~ difficulty(block) * genesis_blockwork
</pre>

The bitcoin-cli tool subcommands sometimes give summary statistics for work in difficulty units, and sometimes in hashes. To avoid the complexities of floating point numbers, OP_ENERGY always prefers hashes, which is defined using integers and integer division.

=== Hashes Between Two Blocks === 

As the definition of chainwork above should make clear, the total number of hashes statistically expected to have produced blocks from block1 to block2, ie the cost to the mining network, is 

todo: consider cost_between insteqd of hashes_between and revenue_between instead of hahes_between and satoshis_between

<pre>
hashes_between block1 block2 = chainwork(block2) - chainwork(block1)
</pre>

To make this calculation easy, a running total of chainwork for each block can be stored. 

=== ChainRevenue === 

Defined similarly to chainWork, ChainRevenue(block) is a protocol measure of revenue in sasoshis earned by miners at this block height. 

<pre>
chainRevenue(blockN) = blockwork(block0) + blockwork(block1) + ... + blockwork(blockN)
</pre>

=== BlockRevenue === 

This is the coinbase of the block. 

=== Miner Revenue Between Two Blocks === 

The total number of satoshis earned by miners from block1 to block2 is 

<pre>
satoshis_between block1 block2 = chainRevenue(block2) - chainRevenue(block1)
            where chainRevenue is sum of all miner rewards (subsidy + fees) up to this block
</pre>

As with chainwork, it would be reasonable to store a running total of chainRevenue to facilitate such calculations. 

=== Price of Satoshis in Hashes Between Two Blocks === 

If we view mining as buying satoshis with hashes, then the price of a satoshi between two blocks could be defined as 

<pre>
hashes_per_satoshi_between block1 block2 = (hashes_betwen block1 block2) / (satoshis_between block1 block2)
</pre>

with chainwork and chainRevenue as defined above.

===Blocktime Dampening Between Two Blocks===

todo: add seconds_between, explain median time past

A thermostat provides negative feedback -- i.e. dampening -- to a climate control system with the objective of keeping a room at a desired temperature, say 72 degrees.  A cruise control system provides dampening feedback to a vehicle to keep it moving at a desired velocity, say 60 miles per hour. Likewise, the bitcoin protocol provides dampening to fix miner productivity at 600 seconds per block.  The mechanism to accomplish this is to adjust the blockwork every epoch (2016 blocks). <ref>https://en.bitcoin.it/wiki/Difficulty#What_network_hash_rate_results_in_a_given_difficulty.3F</ref>

If average seconds per block in a given epoch is under 600 (too fast), blockwork is too low, i.e. blocks are too cheap priced in hashes and the blockwork needs to be raised. Blocks could also be too expensive (too slow), in which case blocktime_dampening_factor would lower the cost of a block in hashes.

<pre>
blockwork (new_epoch) = blockwork (previous_epoch) * blocktime_dampening_factor (previous_epoch)

blocktime_dampening_factor(epoch) = expectedSeconds / actualSeconds
  where expectedSeconds = 600 * blocks 
        blocks = 2016 
        actualSeconds = timestamp(lastBlock in epoch) - timestamp(first block in epoch)  
</pre>

todo: are timestamps block timestamps or median time past values?

The above formula defines the protocol blocktime dampening for one of the 2016 block difficulty epochs. 

OP_ENERGY generalizes this to define the dampening factor for any span of blocks. 

<pre>
blocktime_dampening_factor block1 block2 = expectedSeconds / actualSeconds
  where expectedSeconds = 600 * blocks
        blocks = block2 - block1
        actualSeconds = timestamp(block2) - timestamp(block1)
</pre>

The blocktime_dampening_factor is thus a concrete meausure of whether the bitcoin protocol wants a future rise or fall in blockwork required when looking at some region of blocks.

=== OP_ENERGY === 

todo: consider calling this section (and potentially function name) future_energy_price or future_energy_cost, or just energy_price_between or energy_price or protocol_energy_price_between or... some nicer name. will require ctrl-f price, ctrl-f energy, ctrl-f op_energy, to achieve consistency of terminology and language.

This leads to a definition of the op_energy price as 

<pre>
op_energy_price block1 block2 = (hashes_per_satoshi_between block1 block2) * (blocktime_dampening_factor block1 block2)
</pre>

For consecutive epochs, if revenue is stable, the following holds: 

<pre>
hashes_per_satoshi_between (epoch + 1) = hashes_per_satoshi_between (epoch) * blocktime_dampening_factor (epoch)
</pre>

So:

<pre>
assuming stable revenue: 

op_energy_price (epoch) = hashes_per_satoshi_between (epoch + 1) 
</pre>

Viewing arbitrary block span OP_ENERGY as a generalization of the above formula, we have then an interpretation of OP_ENERGY as an expected future hashes_per_satoshi price, which utilizes all information available to the bitcoin protocol, with stable revenue assumed.

todo: express this precisely, using integer division with everything accounted for, as in the bip. 

Henceforth, energy_price_between will be abbreviated to just energy_price.

===Use Cases===

todo, pretty much everything here needs fleshing out.

====Gambling====

With short block spans, OP_ENERGY contracts are essentially gambling, since these prices are dominated by block discovery time. 

====Hedging USD/BTC in crashes and manias====
In a fiat centric world, if fiat can buy less bitcoin via direct exchange than via hashes (high fiat price, low OP_ENERGY price), it makes sense for savvy bitcoin accumulators to sell bitcoin for fiat, and rebuy the bitcoin with hashes instead. This explains fiat manias, and can be used to hedge against them, using OP_ENERGY.

(Todo: do r squared regression analysis on OP_ENERGY vs BTCUSD prices, for various lenghts of OP_ENERGY block spans. And make charts of OP_ENERGY price vs usd price, using real data, to support this assertion that OP_ENERGY derivatives would be a useful instrument to hedge BTCUSD.)

====Hedging power purchasing agreements, for miners====

Megawatt futures rental rental scenario. Power purchase agreements between miners and utilities. 

====Hedging hashrate purchasing agreements, for utilities====

Similar to how large miners have power purchasing agreements from utilities, utilities will some day want hash purchasing agreements from miners, for when they think they will have excess power that will otherwise go to waste. OP_ENERGY can be used to hedge the risk of miscalculating hash purchases.

====Intuition for OP_ENERGY Price Charts====

To a miner, OP_ENERGY of some block span (eg. 100 blocks) is a moving average of the price of a satoshi, in hashes. So OP_ENERGY time series charts look somewhat similar to hashrate charts, with large leaps in OP_ENERGY prices at halving boundaries. 

OP_ENERGY price also tracks dollar price to some degree. Because electricity and mining equipment -- both linked to energy -- are priced in dollars. Modulo hardware efficiency improvements, which will eventually hit diminishing returns, if OP_ENERGY increases by 100x between two block spans, it costs 100x as much energy to mine a bitcoin, hence 100x as many dollars. To be sure, OP_ENERGY price is not perfectly correlated to fiat price (far from it), but there may be correlation enough to be useful for hedging. Testing of this hypothesis using real world data is in progress. todo: report findings. 

==Historical OP_ENERGY Prices==

<pre>
Todo:
Give correct numbers, which could also work as test vectors. 
Use arith_uint256 arithmetic. Currently using ieee754 floating points, and rounding to the nearest integer.
Use median time. Currently using using block timestamp.
Give packed arith_uint256 packed representation, as well as decimal representation.
</pre>

Single block spans: 

todo, genesis should be 0.

* genesis block                 (OP_ENERGY 0 1): 6
* first two blocks              (OP_ENERGY 0 2): 13
* first block of first halving  (OP_ENERGY 210,000 210,001): 8,078,338 -- 320,069,304,320 -- todo, did this change? seems suspicious?
* first block of second halving (OP_ENERGY 420,000 420,001): 700,961,030,332 -- 80,732,483,485,696 -- todo, suspicious?

The 6 order of magnitude change from genesis to first halving reflects the transition to asics, which was a one time event. The 2 order of magnitude change from first to second halving shows hashes more closely tracking energy (and hence fiat) prices. (todo: work on this paragraph, express it more clearly)

Todo: can we look at OP_ENERGY price at point in time where first fiat trade occurred, for a penny or whatever it was? 2010 sometime iirc. I suspect OP_ENERGY price from then to first halving would far exceed the fiat price change, due to asics. But again this is one time thing. Discuss and make it clearer.

500 block spans: 

* first 500 blocks      (OP_ENERGY 1 500): todo
* before first halving  (OP_ENERGY 209,499 209,999): todo
* around first halving  (OP_ENERGY 209,750 210,250): todo
* after first halving   (OP_ENERGY 210,000 210,500): todo
* before second halving (OP_ENERGY 419,499 419,999): todo
* around second halving (OP_ENERGY 419,750 420,250): todo
* after second halving  (OP_ENERGY 420,000 420,500): todo

Todo: chart 500 block OP_ENERGY price for first 500,000 blocks. 

==Pricing==

Todo, move this out of bip, to whitepaper or something. (bip should have reference to whitepaper and touch on this briefl)
could initially be appendix, step 2 is move everything in appendis to whitepaper.

===Black Scholes Pricing===

Normalized premium is a probability-like number between 0 and 1, corresponding to unit settlement value.  

By Black Scholes, the normalized premium is the negative of a greek-like value I will term strikeD. StrikeD, for strike delta, is the derivative of the vanilla call with respect to strike. <ref>https://en.wikipedia.org/wiki/Binary_option#Skew</ref> (StrikeD is distinct from traditional delta, which is the derivative with respect to spot.)

<pre>
Cv = vanilla call price
K = strike price

strikeD = dCv/dK
normalized premium = - strikeD
</pre>

Equivalently, normalized premium can be derived as follows

<pre>
S = spot price
K = strike price
phi = cumulative distribution function of normal distribution

time_discont = volatility(S) * sqrt( time to settlement ) 
sample_point = ( ln(S/K) / time_discount ) - time_discount / 2
normalized premium = phi ( sample_point ) 
</pre>

todo, write code for above and sanity check that it matches estimatated strikeD

This means that one can price on-chain binaries by looking at price and volatility of correlated assets on traditional custodied exchanges.

===Real World Binary Call Example===

todo: fix this so it is using strikeD instead of regular delta. 

Note: The settlement value is always 10,000 sat by convention in the examples given here, so that only block span, strike, and and premium need vary.

Bob wants to make a market on OP_ENERGY from blocks 647,136 to 648,136, which is 1000-2000 blocks in the future for Bob when he is making this market. To do this, he needs to pick a strike, and determine a strikeD for it. 

<pre>
Current date: August 29, 2020 
Current block: 646,136
Next difficulty adjustment block: 647,136
Predicted difficulty adjustment, from block times: -4.3%
Predicted OP_ENERGY price adjustment, from block times: -4.3%
PRICE_645_646 = OP_ENERGY 645,136 646,136 = TODO, give real number (price of last 1000 blocks, which is known)
</pre> 

Since energy currently trades against fiat, to get a market feel Bob looks at what fiat call prices are available, expiring around September 7. 

<pre>
Block 647,136: around September 7, 2020
On deribit:
  Spot: $11,450
  $11,000 vanilla call deltas
    September 4: 0.76
    September 11: 0.70
    Splitting the difference, September 7 delta guesstimate: 0.73.
  $11,000 is 4% under spot
</pre>

The on-chain predicted OP_ENERGY price adjustment of -4.3% is reasonably in line with deribit's prediction that fiat price is 73% likely to not drop more than 4%. 

So Bob could price a strike of PRICE_645_646 - 4%, on blocks 647,136 to 648,136, at 7300 sat (10,000 * 0.73, where by  convention 10,000 sat is the standard settlement amount of an OP_ENERGY binary, Alice contributing 7300 premium, and Bob the rest). The 10,000 sat settlement convention used in this bip is similar to how, eg, Nadex binaries always have $100 settlement.<ref>https://www.nadex.com/learning/what-are-binary-options-and-how-do-they-work/</ref>

<pre>
 STRIKE_ALICE_BOB = PRICE_645_646 * 0.96 = (todo, give real number)
</pre>

Alice, the buyer, is paid the 10,000 sat if 

<pre>
STRIKE_ALICE_BOB < OP_ENERGY 647,136 648,136 
</pre>

Bob, the seller, is paid if difficulty drops more than 4%, and then stabilizes within 647,136-648,136. Equivalently, Bob could also win if difficulty is unchanged but then blocks start coming in more than 4% slower from 647,136-648. (Or any other condition that results in OP_ENERGY falling more than 4%.)

Bob would like to earn 1% as a market maker. So he would buy at 0.5% less (7263 sat) and sell at 0.5% more (7336 sat).

I believe this to be a reasonable pricing model, for demonstration purposes. If the bip is adopted, I expect full time and hyper-competitive market markers would use more sophisticated models. 

If Bob can match buyers and sellers for say, a 1 month lock-up period, this is equivalent to earning 1% a month market risk free, and exit-scam risk free, on his bitcoin. So there is an incentive to market-make. 

If custodial exchanges offered vanilla OP_ENERGY calls, strikeD on these could be used for pricing the binaries directly, rather than translating from strikeD on vanilla fiat calls. There is profit incentive to do so. Custodial exchanges are natural market makers for OP_ENERGY binaries, because they have first look at the data (in particular strikeD) on their own platforms. Given this edge, it is reasonable to hope that OP_ENERGY derivatives will emerge on custodial exchanges to complement trades happening on chain. 

==Compound Contracts==

Todo, move this out of bip, to whitepaper or something. (bip should have reference to wherever this moves)

We have already seen the binary call contract. From Bob's point of view, this is a binary put. 

Two binary calls or puts can be composed and the result is another contract. In fact any two contracts can be composed, yielding a rich structure of possible contracts which can be created and settled as individual units. 

With compound contracts, we can create synthetic versions of derivatives such as vanilla puts and calls, futures, and the like.

====Synthetic Vanilla Call Example====

Let us create a synthetic vanilla call from ten binary calls, the first of which is from our previous example.

Our vanilla call is composed of ten binary calls, each 10,000 sat, as in the previous example. The binaries have strikes at STRIKE_ALICE_BOB (see above), STRIKE_ALICE_BOB+1%, etc, up to STRIKE_ALICE_BOB+9%. The synthetic vanilla call has expected payoff less than the organic vanilla call if the underlying OP_ENERGY price increases by more than 9%.<ref>tier nolan:  https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2020-August/018087.html</ref>

This vanilla has a maximum settlement value of 100,000 sat. If the measured price is under STRIKE_ALICE_BOB, Bob sweeps all 100,000 sats. If it is higher than the STRIKE_ALICE_BOB*1.09 cap, Alice gets everything. If the price settles somewhere between, Bob and Alice split the 100,000 sats, with each binary acting like a price tick that decides who should get the settlement coins. So it acts very similarly, but not identically, to an organic call.

Pricing for the synthetic call can be worked out by pricing the component binary calls, as in the previous example, and then adding up all the prices.

The payoff of this call is capped. And it pays off in granular ticks. So the non-custodied synthetic is different from the custodied organic, which pays off smoothly and is not capped. However, by expanding the max price higher and adding more ticks, the synthetic can mock the organic to any desired level of fidelity. The more realistic, the longer the definition in bitcoin script and hence the higher the transaction fee. Fortunately, synthetics can avoid mining fees by using lightning. So, very rich and organic feeling derivatives can be built affordably. 

====Compound Contract Construction====

From a bitcoin script point of view, there are a few basic techniques for composing binaries into compound contracts.

* Multiple if/then clauses, one utxo
** one maker, one taker
** easiest to negotiate and coordinate
** works well with 2-party lightning
** cheaper in block space than multiple utxos. If adopted, taproot would make this cheaper still: cost logarithmic in number of ticks rather than linear.<ref>zmnscpxj: https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2020-August/018090.html</ref>
** can't settle until 100 blocks after the highest block used in an OP_ENERGY calculation
* Multiple utxos, single if/then clause for each utxo
** many makers and takers (similar feel to coinjoin)
** could work with multi party lightning
** more flexible
* Mix and match: Many utxos, many if/then clauses, many makers and takers
** most flexible
** also most difficult to negotiate and coordinate

All of these techniques create contracts via a single bitcoin transaction. This guarantees alice a set price for the contract. 

Alternatively, Alice may compromise and split the contract she desires into multiple transactions. She loses the single transaction price guarantee, but by shopping around for advantageous prices over a longer period of time she gains flexibility and may ultimately be more profitable. In so doing, Alice shifts from taker into maker role.

==High Frequency Trading (OP_ENERGY with Lightning)==

=== Buying and Selling Binaries with Lightning (direct channel) === 

In this section, we show how Alice could buy a binary from Bob, and sell it back, using lightning. Neither the buy nor the sell appears on chain, and no mining fees need be paid. For simplicity, we start with the case where Alice has a direct channel with Bob, so we don't need to worry about routing or lightning fees.

We start with Alice having a 40,000 sat dual funded channel with Bob. Each of them has a balance of 20,000 sat. 

<pre>
Alice <- 20,000 20,000 -> Bob
</pre>

We use the pricing example from before, so Alice buys a binary for 7,336 sat. In return, Bob has to lock up 10,000 sat until the second block is mined. 

<pre>
Alice <- (20000 - 7336) ( 10,000 locked settlement ) ( 20,000 + 7,336 - 10,000 ) -> Bob
=> Alice <- 12664 (10,000 locked settlement) 17336 -> Bob
</pre>

Alice still has 12,664 sats of liquidity that she can use to make lightning purchases on this channel. Bob has 17,336 sats of liquidity he can spend through Alice. And 10,000 sats are locked up until the second block is reached. 

Blocks start coming in more slowly, and Alice starts to worry about her position. So she tries to sell the binary back to Bob. Bob agrees to buy the contract back from Alice, for 7263 sat. Since Bob originated the contract in the first places, this erases the contract. The channel how looks like

<pre>
Alice <- (12,664 + 7,263) (17,336 - 7,336 + 10,000) -> Bob
=> Alice <- 19927 20073 => Bob
</pre>

Bob made 73 sats, or 0.73% on the 10,000 sat he had to lock up. And it is just a pristine, ordinary lightning channel again. As far as the world knows, if the channel closed now, no visible trades took place. 

Alternatively, if Bob was not offering Alice an attractive buy back price, Alice could have shopped around with other market makers to sell a 16.9T binaries to, thereby neutralizing the trade she put on with Bob. This results in two lightning channels with sats tied up in the binary. There is less lightning liquidity with this scenario than where Bob let Alice out of her position, but financially there is the same risk profile for Alice, ie no market risk. And Bob got to hold on to the trade that he likes. 

(Todo: give technical justification that this can be done with lightning.)

=== Binaries with Lightning (routing) === 

What if Alice does not have a direct channel with Bob, but wishes to route through Carol? 

This should still work. However, unlike the usual situation for a routing node, Carol has 10,000 sats of liquidity locked up. She will have to be compensated for this with lightning fees. It's similar to paying interest at a bank. 

Todo: flesh out this example. 

==Risks==

===ARITH_UINT256 Specification Inconsistency===

The specification of 256 bit integers must be very simple and clear, to eliminate inconsistency between clients. Ditto for block target, and chainwork. 

Review bitcoin core for gotchas. 

===Price manipulation ===

Some scenarios will now be explored, where miners attempt to profit by manipulating the OP_ENERGY price via their mining activity. 

These scenarios can generally be mitigated, as we will see.

Mitigation aside, a point in favor of adopting OP_ENERGY, despite potential attacks, is that OP_ENERGY style binary trades could be conducted on normal custodying / centralized exchanges, with a trusted oracle to enforce trades. In this case, miners could  perform all these manipulation strategies, without OP_ENERGY in the protocol. Given this, it can be argued: might as well do OP_ENERGY on chain and have bitcoin benefit from higher hashrate, volume moving off custodying exchanges, and more rapid hyperbitcoinization.

That being stated, let's look at attacks, and mitigations.

====Long Manipulation by Miners====

Miners could long OP_ENERGY, and win their contracts by maximizing the numerator and/or minimizing the denominator in 

<pre>
price = ( hashes * expectedSeconds ) / (actualSeconds * satoshis)
</pre>

We begin with the easier attack: minimizing the denominator. 

Without sacrificing any revenue, the miner could report a timestamp one second higher than the last, resulting in an actualSeconds of 1. If the miner is also willing to sacrifice coinbase revenue, satoshis can also be recorded as low as 1. So if the miner does both, the reported denominator can be made as low as 1. 

todo, what about under-reporting actualSeconds for a string of blocks? 

Now a harder attack: maximizing the numerator. 

Near difficulty epoch changes, there is the potential to manipulate the "hashes" part of future blocks up, by using more energy to hash... hmmm.... todo: wouldn't it be easier to just keep under-reporting actualSeconds for a string of blocks? Is there a mitigation here, for time to be greater than something that depends on nodes, and not just miners? 


price can be manipulated up by buying more hashpower than would otherwise be economically reasonable. 

This could raise the OP_ENERGY price by a large enough amount to confound trader expectations.

A miner with 51% of hashpower could perform such attacks with impunity. With less hashpower, it still might make economic sense. (Todo: think more about this.) 

The "buy hash" attack potentially has the benefit of being hard to detect. But, it is very expensive. (Todo: flesh this out more.) 

My tentative conclusion is it makes more sense to focus on the minimize denominator attack, than spending more energy on hashing than economically reasonable, just to raise future difficulty. 

====Short Manipulation by Miners====

Miners could long OP_ENERGY, and win their contracts by maximizing the same denominator mentioned in the "short manipulation" attack. In this version, actualSeconds would be set to the maximum nodes will accept. And satoshis can be increased, by including self mined transactions with high fees. 









todo, fix this section, incorporating feedback from David Harding

For the purposes of this bip, an uneconomic transaction is a transaction whose primary purpose is other than to move bitcoin cheaply as the market will allow at the speed desired.  Currently (I have no proof of this but seems likely), uneconomic transactions may being mined whose purpose is to manipulate transaction fees higher. In an OP_ENERGY world, uneconomic high-fee transactions could be made to manipulate OP_ENERGY lower.

From an observing node's point of view, an uneconomic transaction can be characterized as a transaction with unnecessarily high fees, which is included in a block without being in the node's mempool. There is no way to know with certainty that a transaction is uneconomic, as opposed to user overpayment error, or that the mempool is propagating slowly. But transactions could receive "suspiciousness" scores according to this metric. 

Miners can short OP_ENERGY and self-mine high-fee uneconomic transactions that they themselves have created and not transmitted, to manipulate the OP_ENERGY hashes/sat price down. Since there is no upper limit on transaction fees, OP_ENERGY can be made arbitrarily low with a single successfully self-mined transaction. Miners with high hashrate, or colluding miners who collectively have high hashrate, thus are well positioned to profit on short OP_ENERGY trades. 

That being said, a lesser version of this problem exists without OP_ENERGY. Miners are already currently incentivized to include uneconomic high-fee transactions, to manipulate transaction fees higher.

There are game theoretic reasons why miners don't in fact manipulate transaction fees -- or are limited in how much manipulation can in practice be done. These reasons and limits apply in an OP_ENERGY world as well.

The primary check on miners' ability to include uneconomic transactions is that once a transaction is in a block, there is the risk of block orphaning and another miner poaching the fee. The more unusually high the fees, the greater the incentive and therefore the higher the risk of poaching. A secondary risk for miners is that nodes may delay relay of suspicious blocks which appear to contain uneconomic transactions (unusually high fee, and not seen in mempool), further increasing the orphan risk. No such relay delay mechanism is described in the bitcoin white paper. But, nodes control relay, not miners. In today's world, most economically important nodes want lower fees. In an OP_ENERGY world, economically important nodes would want a fair and smoothly functioning OP_ENERGY market, as they are working as market makers and earning lightning transaction fees. So miners cannot self-mine uneconomic transactions with impunity. This is true today, and would continue to be true if OP_ENERGY went live. 

Let's explore this in more depth. 

Both for current transaction fee manipulation, and in an OP_ENERGY world, the calculus for profitability of cheating by inclusion of uneconomic fees worth txV satoshis, is something like:

todo: why txV? better var name? 

<pre>
profit = expectedProfit - expectedLoss
  where expectedProfit = probabilitySuccessfullyMinedBlock * txfeeManipulationRevenue 
        expectedLoss = txLoss + blockLoss + networkTrustDestructionLoss
        txLoss = orphanProbabilityWithManipulation * txV
        blockLoss = orphanProbabilityDelta * (blockRevenue - txV)
        orphanProbabilityDelta = orphanProbabilityWithManipulation - orphanProbabilityWithoutManipulation
        networkTrustDestructionLoss = socialized cost of loss of trust due to miner misbehavior. 
          (Not much can  be said about this hard to measure quantity, other than noting it.)
</pre>

todo: review if above blockRevenue conflicts with other sense this is used

Clearly, OP_ENERGY cheating has potential for greater txfeeManipulationRevenue, than is currently the case with just trying to surreptitiously nudge bitcoin users to pay higher fees. But, OP_ENERGY manipulation is also likely to involve higher txV fees, and be more obviously suspicious. So there is more incentive for fee poaching as well, meaning more risk for cheaters. There is also a higher risk of validating nodes delaying confirmation of suspicious blocks, further raising the poaching risk. Many validating nodes would be economically important OP_ENERGY market makers, after all, who are likely to want to retaliate if they see evidence of OP_ENERGY markets being abused. 

In sum, the incentives already pitting hodling nodes against miners are sufficient to deter the attack.

====Sacrifice of coinbase revenue====

Todo, needs work: 

Miners can also long OP_ENERGY and exclude transactions to manipulate the price up. The extreme of this would be to mine empty blocks and/or refuse subsidy, resulting in a revenue of 1 satoshi per block. . Cartels of miners and pools could be formed to make the attack more effective. 

Another attack would be to lower txfee rate by excluding transactions, or in the extreme just mining empty blocks. This attack is not as bad, because it is more expensive to miners than the raising fee attack, and it cannot lower txfee rate arbitrarily within a single block, whereas the fee raising attack can raise fees arbitrarily with a single transaction. So it is believed that already existing penalties are sufficient to stop OP_ENERGY manipulation by lowering transaction fees. 



A miner could sacrifiece coinbase revenue to manipulate OP_ENERGY price up, confounding trader expectations.<ref> As an interesting side note, at time of writing, actual revenue is already a few satoshis below maximum revenue, presumably due to miner error https://medium.com/amberdata/why-the-bitcoin-supply-will-never-reach-21-million-7263e322de1</ref>




If the subsidy lost is less than OP_ENERGY contracts revenue gained, the attack makes sense economically. 

todo: think through attack scenarios here more
  consider especially, after subsidy epoch ends, miner mining an empty block. would nodes accept this?
  how about a non-empty but sparse block? would nodes accept this? 
    perhaps. but an equilibrium would emerge with op-energy contracts over a sufficiently long period immune to such games. is my thesis. but is it true? 
    review stuff about non-economic transactions. 

Could this attack be detected, and mitigated similarly to the 

xclusion of Economic Transactions====


==== Difficulty Manipulation ====

This is more difficult. Todo, think it through anyway.

====Does Price Manipulation Pose Increased Risk of Chain Split?====

Is there a problem?

Look for OP_ENERGY scenarios where miners are more incentivized to hoard unpublished blocks and/or split the chain, beyond what already exists. I can't think of any, but if I am wrong this could be a reason to abandon OP_ENERGY. 

A starting point could be a low probability, high profit OP_ENERGY trade between a large miner and a speculator, where the miner bets on an unlikely OP_ENERGY measurement and then manipulates hash and/or transaction fees to win the bet. While manipulation is undesirable, I don't see why this would lead to chain splits or other misbehavior to non OP_ENERGY transactions however. 

====Penalization of Uneconomic Transactions====

To do

=== Hash Algorithm Change ===

Todo, describe how this could be handled. I think all you need is a scaling factor, but think it through better. 

=== Transparency of miner fees ===

For bitcoin to work, this must hold

<pre>
coin inputs = coin outputs + fee
</pre>

for each transaction. The actual inputs and outputs need not be transparent, though they currently are. 


For OP_ENERGY to work, in addition to the above, the fee must also be transparent, so that miner revenue can be publicly known. 

Todo: Do schemes such as confidential transactions, mimblewimble, homomorphic encryption, or others, put this in jeapordy? Or other schemes? (see zmnscpxj bitcoin-dev comment, in "taproot nack" thread, around march 17 2021)

==Cost to Nodes==

===Memory===

OP_ENERGY can be calculated rapidly and cheaply if validating nodes keep arith_uint256 converted values for chainwork, mediantime, and chainFees. This is 12 bytes total per block, so the first million blocks will require 12mb additional storage. Not too bad, even for an underpowered node running on a raspi. These values may already be being stored in nodes. (Mediantime certainly is, as it is in block header. todo: double check it. I think timestamp, not mtp, is in block header)

todo: this is wrong, chainRevenue is 64 bits (double check this because running total), and chainwork is 256 bits, and seconds is 32 bits but should be 64 to avoid overflow error in a few decades. 256 + 64 + 64 => 384 bits. 48 bytes per block. 

===Mempool, and 100 block depth burying rule for OP_ENERGY spends===

There is an implicit bitcoin protocol rule that once a transaction is admitted to the mempool, the only condition that would result in its ejection is a double spend. <ref>personal communication related to op_energy peer review, zmnscpxj</ref>

This rule could be violated if a miner reward spend was admitted to the mempool, and then the reward block was orphaned. Miner reward outputs are therefore required to be buried 100 blocks deep before they can be spent. Basically, it's believed that 100 blocks is sufficiently deep that no spend from an orphan could ever make it into the mempool. 

With OP_ENERGY, the rule above could be violated if an OP_ENERGY settlement transaction was initially in favor of the buyer (above the strike), but then changed to be in favor of the seller (below the strike), again due to reward block orphaning and the ensuing blockchain reorganization.  

The same 100 block burying criteria therefore applies to spending OP_ENERGY outputs. 

==Alternative Approaches==

=== What Merovingian proposes === 

Merovingian is a work-for-hire bitcoin protocol consulting team that would prefer not to be publicly identified. (todo)

===More Primitives===

Rather than supply opcodes for each possible measurement, another approach would be to supply primitives and let traders use these a la carte. For example

<pre>
hashes / satoshis * ( expectedSeconds / seconds ) > strike
</pre>

is equivalent to

<pre>
hashes * expectedSeconds > strike * satoshis * seconds
</pre>

So, to do OP_ENERGY with "a la carte primitives" the following opcodes are recommended

<pre>
OP_HASHES block
OP_MEDIANTIME block
OP_CHAINFEES block (sum of all fees since genesis)
OP_CHAINSUBSIDY block (sum of all subsidy since genesis)
OP_UINT256ADD arith_uint256_1 arith_uint256_2 (for adding fee revenue and subsidy revenue)
OP_UINT256SUBTRACT arith_uint256_1 arith_uint256_2
OP_UINT256MULTIPLY arith_uint256_1 arith_uint256_2
</pre>

If only OP_ENERGY style contracts for miner revenue are desired, OP_CHAINFEES/OP_CHAINSUBSIDY/OP_UINT256ADD could be combined into the single OP_CHAINREVENUE opcode. 

OP_BYTES and OP_VBYTES might also be desirable. These measures would enable speculation on transaction fee rates. 

===More Measures===

There are other possible measures. For instance, one might wish to allow contracts on txfee rate in a range of blocks, or hashes / block (ignoring transaction fewes, or ovarious other things. These could all be added with their own OP measuring code, without enabling additional primitives.

===Pros and Cons===

The single OP_ENERGY approach is preferred in this bip as it is a reasonable schelling point to bootstrap a derivatives market. This is preferred to the the more flexible "more primitives" approach because it requires fewer opcodes, and unifies the market around a single reasonable type of contract. The single opcode approach also saves some bytes on chain. However, if there is strong consensus for the a la carte "more primitives" approach, there is no strong reason not to do so. Potentially OP_ENERGY could be rolled out first, and then if it gains traction the additional a la carte opcodes, and/or more measures, could roll out in a later protocol upgrade. 

todo: Is there another alternative/equivalent implementation of OP_ENERGY, using POWSWAP, along with arith_uint256 arithmetic and OP_REVENUE? Would be good to understand powswap better.

==Comparison to Similar Proposals==

POWSWAP: Enables on-chain speculation in hashrate.<ref>https://powswap.com</ref> Powswap does not require a protocol change. However, powswap is an inferior measure of the price of bitcoin in hashes as it does not include transaction fees, which will some day dominate block reward. So powswap is a good measure of overall energy spend, but not (in the long run) of energy price, which requires a denominator in bitcoin. That being said, I think it would be great to see powswap brought online asap.

todo: is there an issue with powswap, where you need watchtowers? I think I asked on list about this, and jeremy rubin said no and gave an example, but I didn't understand it. (right?)
review this: https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2020-September/018150.html

OP_DIFFICULTY: The initial inspiration for this bip.<ref>https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2019-May/016952.html</ref> Alas, Tamas Blummer passed away before he could produce a concrete specification. 

Discreet Log Contracts: Discreet log contracts enable non-custodial trades, not only in energy derivatives but in any asset.<ref>https://dci.mit.edu/smart-contracts</ref> No protocol change is required. However, trust in an oracle is required, which makes DLC inferior to OP_ENERGY for energy derivatives. That being said, I very much favor DLC for every other type of trading that cannot be trustlessly pegged to hashing, and hope it is developed successfully and sees wide adoption soon. 

== Footnotes ==

<references />